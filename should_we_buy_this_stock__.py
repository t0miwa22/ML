# -*- coding: utf-8 -*-
"""Should_we_buy_this_stock_ .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TbgtNRUu2eMvzggtyErbvlNn0fen2XB4

#  Should we buy this stock?

Youâ€™re a financial analyst to an important investor who is interested in a particular stock (maybe because he read r/wallstreetbets). He wants to know if the particular stock behaves independently to the overall stock market.

Your goal is not to forecast the stock market prices, but to compare the company's stock prices to the US market. This is a much more actionable analysis since it identifies when a stock deviates from the market and thus may present as an opportunity.

You can perform this analysis on **many companies** falling in the same group (for example FAANG) and compare them against each other.
"""

# install the yahoo finance API package
!pip install yfinance

# Import necessary packages
import pandas as pd
import numpy as np
from pandas_datareader import data as pdr
from datetime import datetime
import yfinance as yf

"""- Describe the companies by utilizing the commands available in the API (https://pypi.org/project/yfinance/)

- Plot their stock prices on the same graph

- Group by date and compare their daily, monthly and annual return
"""

data = ["AAPL", "AMZN", "META", "GOOG", "NFLX", "^GSPC"]

start_date = "2018-07-15"
end_date = "2023-07-15"

data = yf.download(data, start=start_date, end=end_date)["Adj Close"]

data.isnull().sum()

# Plotting the normalized adjusted close prices
# normalize the dtaa first before plotting - makes for a more meaningful comparison
normalized_data = data / data.iloc[0] * 100
normalized_data.plot(figsize=(14, 7))
plt.title('Normalized Adjusted Close Price Over Time')
plt.ylabel('Adjusted Close Price')
plt.xlabel('Year')
plt.grid(False)
plt.show()

"""##Trend##

Adjusted Close Price Over Time

In the plot above, we observe the normalised adjusted close of AAPL, AMZN, META, GOOG, NFLX, and the S&P 500 (^GSPC) over the past five years.

Observations:

Apple (AAPL) has demonstrated a robust and consistent growth trajectory over the past five years. Its performance not only exhibits a steady upward trend, but also consistently surpasses the S&P 500.

Google (GOOG) also reveals a consistent pattern of growth, although it is accompanied by higher volatility. This is particularly noticeable during certain periods where the stock's value fluctuates more rapidly. We observe an initial phase of moderate growth, which then accelerates, only to be followed by a slight contraction.

Amazon (AMZN) still shows an overall growth trend across the five years, but its performance in the latter two years, starting from 2022, raises potential concerns. During this period, AMZN's growth has decelerated and the stock has begun to underperform compared to the S&P 500

META and NFLX sBoth stocks have underperformed when benchmarked against the S&P 500 during the observed period. This suggests that these stocks may pose higher investment risks
"""

daily_returns = normalized_data.pct_change()
monthly_returns = normalized_data.resample('M').ffill().pct_change()
annual_returns = normalized_data.resample('Y').ffill().pct_change()

daily_avg_returns = daily_returns.groupby(daily_returns.index.date).mean()
monthly_avg_returns = monthly_returns.groupby(monthly_returns.index.to_period('M')).mean()
annual_avg_returns = annual_returns.groupby(annual_returns.index.to_period('Y')).mean()

fig, axes = plt.subplots(3, 1, figsize=(14, 12))
axes[0].plot(daily_avg_returns, color='b')
axes[0].set_title('Average Daily Returns')
axes[0].set_ylabel('Returns')

# Convert the index of monthly_avg_returns to date format
monthly_avg_returns.index = monthly_avg_returns.index.to_timestamp()

axes[1].plot(monthly_avg_returns, color='g')
axes[1].set_title('Average Monthly Returns')
axes[1].set_ylabel('Returns')

# Convert the index of annual_avg_returns to date format
annual_avg_returns.index = annual_avg_returns.index.to_timestamp()

axes[2].plot(annual_avg_returns, color='r')
axes[2].set_title('Average Annual Returns')
axes[2].set_ylabel('Returns')

plt.xlabel('Date')
plt.tight_layout()
plt.show()

# Calculate summary statistics of the closing prices
closing_prices_stats = data.describe()
print(closing_prices_stats)

# Plotting the histogram of the normalized closing prices
plt.hist(normalized_data, bins=20)
plt.title('Distribution of Normalized Closing Prices')
plt.xlabel('Normalized Closing Price')
plt.ylabel('Frequency')
plt.show()

# Apply log transformation to the normalized closing prices
log_normalized_data = np.log(normalized_data)

# Plot the histogram of the log-transformed data
plt.hist(log_normalized_data, bins=20)
plt.title('Distribution of Log-Transformed Closing Prices')
plt.xlabel('Log-Transformed Closing Price')
plt.ylabel('Frequency')
plt.show()





"""# Compare the US market return with the Company's return

- Donwload recent data for US returns : https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html

- Please refer to [this tutorial](https://youtu.be/ucKK528ApCw) here if you'd like more context

- Match the dates of both dataframes and calculate return **Return = (Today-Yesterday)/Today**
- Plot both returns on one chart to check for similar characteristics

I used the NYSE as a representative of the US market. The NYSE's large market capitalization and extensive list of companies make it a comprehensive reflection of the US economy. With diverse industry representation, the NYSE captures trends and fluctuations across multiple sectors. As a benchmark for various indices and financial instruments, its movements are indicators of market sentiment. The NYSE's broad investor participation and regulatory oversight contribute to its reputation as a reliable representation of the US market

# Linear regression
"""

import pandas as pd
nyse = pd.read_csv('^NYA.csv', parse_dates=['Date'], index_col='Date')
goog_df = pd.read_csv('GOOG.csv', parse_dates=['Date'], index_col='Date')


goog_df.shape

nyse['Return'] = nyse ['Close'].pct_change()
goog_df['Return'] = goog_df ['Close'].pct_change()

goog_df

merged_df = pd.merge(nyse[['Return']], goog_df[['Return']], left_index=True, right_index=True, how='inner')
merged_df.columns = ['nyse_return', 'goog_return']

X = merged_df[['nyse_return']]
y = merged_df['goog_return']

import statsmodels.api as sm

X = sm.add_constant(X)
model = sm.OLS(y, X, missing='drop')  # drop rows with missing values
results = model.fit()
print(results.summary())

"""- Run linear regression between both returns and check if the slope is statistically significant. If it is close to 1 then the Global US market and the chosen company behave in the same manner.

- Check the accuracy of your model.

- Run a T test to check if the slope in close to 1 or not

- Conclude your analysis. Which companies follow the same market trend that you would recommend to your investor ?
"""

import matplotlib.pyplot as plt

import seaborn as sns

# Create a DataFrame from X and y for easier plotting
df_plot = pd.DataFrame({
    'NYSE Returns': X['nyse_return'],
    'GOOG Returns': y
})

# Use seaborn to create a scatterplot of the data and fit a regression line
sns.regplot(x='NYSE Returns', y='GOOG Returns', data=df_plot, line_kws={'color': 'red'})

# Set the title
plt.title('NYSE Returns vs GOOG Returns')

# Display the plot
plt.show()

print("Predicted y-values:", results.fittedvalues)
print("Min and Max of NYSE Returns:", X['nyse_return'].min(), X['nyse_return'].max())

"""# Take it further

- Run Linear regression between all FAANG companies and compare your results to the comparision with the US market.
"""

amzn = pd.read_csv('AMZN.csv', parse_dates=['Date'], index_col='Date')
aapl = pd.read_csv('AAPL.csv', parse_dates=['Date'], index_col='Date')
nflx = pd.read_csv('NFLX.csv', parse_dates=['Date'], index_col='Date')
goog = pd.read_csv('GOOG.csv', parse_dates=['Date'], index_col='Date')
meta = pd.read_csv('META.csv', parse_dates=['Date'], index_col='Date')  # replace 'META.csv' with your actual filename

amzn['Return'] = amzn['Close'].pct_change()
aapl['Return'] = aapl['Close'].pct_change()
nflx['Return'] = nflx['Close'].pct_change()
goog['Return'] = goog['Close'].pct_change()
meta['Return'] = meta['Close'].pct_change()

stock_dfs = {'AMZN': amzn, 'AAPL': aapl, 'NFLX': nflx, 'GOOG': goog, 'META': meta}

for stock_name, stock_df in stock_dfs.items():
    # Merge the dataframes on the index (Date)
    merged_df = pd.merge(nyse[['Return']], stock_df[['Return']], left_index=True, right_index=True, how='inner')
    merged_df.columns = ['nyse_return', f'{stock_name}_return']

    # Define your dependent (y) and independent (X) variables
    X = merged_df[['nyse_return']]
    y = merged_df[f'{stock_name}_return']

    # Add a constant to the independent variable using statsmodels
    X = sm.add_constant(X)

    # Fit the model using Ordinary Least Squares (OLS) regression
    model = sm.OLS(y, X, missing='drop')  # drop rows with missing values
    results = model.fit()

    # Print out the statistics
    print(f"Regression results for {stock_name}:")
    print(results.summary())
    print("\n")

    # Plot the actual data and the regression line
    plt.figure(figsize=(8, 6))
    sns.regplot(x='nyse_return', y=f'{stock_name}_return', data=merged_df, line_kws={'color': 'red'})
    plt.title(f'NYSE Returns vs {stock_name} Returns')
    plt.show()

